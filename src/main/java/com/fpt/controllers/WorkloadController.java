package com.fpt.controllers;

import com.fpt.models.TimeEntry;
import com.fpt.models.WorkloadStats;
import com.fpt.services.TimeEntryService;
import javafx.fxml.FXML;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Label;
import javafx.scene.paint.Color;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

public class WorkloadController {
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM");

    @FXML private Label hoursWorkedLabel;
    @FXML private Label remainingHoursLabel;
    @FXML private Label workloadStatusLabel;
    @FXML private Label warningLabel;
    @FXML private BarChart<String, Number> weeklyChart;
    @FXML private TextFlow recommendationsFlow;

    private TimeEntryService timeEntryService;
    private WorkloadStats todayStats;
    private Map<LocalDate, WorkloadStats> weeklyStats;

    public void initialize() {
        setupChartStyle();
    }

    public void setTimeEntryService(TimeEntryService timeEntryService) {
        this.timeEntryService = timeEntryService;
    }

    private void setupChartStyle() {
        weeklyChart.setAnimated(false);
        weeklyChart.setBarGap(2);
        weeklyChart.setCategoryGap(20);
    }

    public void updateWorkloadStats() {
        List<TimeEntry> allEntries = timeEntryService.getAllTimeEntries();
        weeklyStats = WorkloadStats.createWeeklyStats(allEntries);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        todayStats = weeklyStats.get(LocalDate.now());
        if (todayStats != null) {
            updateTodayStats();
        }

        // –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é
        updateWeeklyChart();

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        updateRecommendations();
    }

    private void updateTodayStats() {
        hoursWorkedLabel.setText(String.format("%.1f —á", todayStats.getHoursWorked()));
        remainingHoursLabel.setText(String.format("%.1f —á", todayStats.getRemainingHours()));
        workloadStatusLabel.setText(todayStats.getWorkloadStatus());

        String warning = todayStats.getWorkloadWarning();
        if (warning != null) {
            warningLabel.setText(warning);
            warningLabel.setVisible(true);
            warningLabel.setManaged(true);
        } else {
            warningLabel.setVisible(false);
            warningLabel.setManaged(false);
        }
    }

    private void updateWeeklyChart() {
        weeklyChart.getData().clear();
        XYChart.Series<String, Number> series = new XYChart.Series<>();

        LocalDate today = LocalDate.now();
        for (int i = 6; i >= 0; i--) {
            LocalDate date = today.minusDays(i);
            WorkloadStats stats = weeklyStats.getOrDefault(
                    date,
                    new WorkloadStats(date, List.of())
            );

            XYChart.Data<String, Number> data = new XYChart.Data<>(
                    date.format(DATE_FORMATTER),
                    stats.getHoursWorked()
            );

            // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
            data.nodeProperty().addListener((obs, old, node) -> {
                if (node != null) {
                    if (stats.isOverworked()) {
                        node.setStyle("-fx-bar-fill: #ff6b6b;"); // –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
                    } else if (stats.getHoursWorked() == 8.0) {
                        node.setStyle("-fx-bar-fill: #51cf66;"); // –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–æ—Ä–º—ã
                    } else {
                        node.setStyle("-fx-bar-fill: #339af0;"); // —Å–∏–Ω–∏–π –¥–ª—è –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫–∏
                    }
                }
            });

            series.getData().add(data);
        }

        weeklyChart.getData().add(series);
    }

    private void updateRecommendations() {
        recommendationsFlow.getChildren().clear();

        if (todayStats == null || !todayStats.isOverworked()) {
            double weeklyHours = weeklyStats.values().stream()
                    .mapToDouble(WorkloadStats::getHoursWorked)
                    .sum();

            if (weeklyHours > 40) {
                addRecommendation("‚ö†Ô∏è –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –±–æ–ª—å—à–µ 40 —á–∞—Å–æ–≤. " +
                        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –≤ —Å–ª–µ–¥—É—é—â–∏–µ –¥–Ω–∏.", Color.ORANGERED);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏
            long overworkedDays = weeklyStats.values().stream()
                    .filter(WorkloadStats::isOverworked)
                    .count();

            if (overworkedDays >= 2) {
                addRecommendation("\n‚ö° –£ –≤–∞—Å –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞–º–∏. " +
                        "–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.", Color.ORANGERED);
            }

            if (todayStats != null && todayStats.getHoursWorked() < 8.0) {
                addRecommendation("\n‚ú® –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –µ—â–µ –µ—Å—Ç—å " +
                        String.format("%.1f", todayStats.getRemainingHours()) +
                        " —á–∞—Å–æ–≤ –¥–æ –Ω–æ—Ä–º—ã. –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.", Color.GREEN);
            }
        } else {
            addRecommendation("üõë –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. " +
                            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–Ω–∏–∂–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —É—Å—Ç–∞–ª–æ—Å—Ç–∏.",
                    Color.RED);
        }

        addRecommendation("\n\nüí° –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" +
                        "‚Ä¢ –î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤ –∫–∞–∂–¥—ã–µ 1-2 —á–∞—Å–∞\n" +
                        "‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n" +
                        "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Å–∞–Ω–∫–æ–π\n" +
                        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–π—Ç–µ –ø–æ–º–µ—â–µ–Ω–∏–µ",
                Color.BLACK);
    }

    private void addRecommendation(String message, Color color) {
        Text text = new Text(message);
        text.setFill(color);
        recommendationsFlow.getChildren().add(text);
    }
} 